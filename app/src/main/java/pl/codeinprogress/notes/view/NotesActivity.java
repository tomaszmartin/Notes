package pl.codeinprogress.notes.view;import android.content.Intent;import android.os.Bundle;import android.support.design.widget.FloatingActionButton;import android.support.design.widget.NavigationView;import android.support.v4.view.GravityCompat;import android.support.v4.widget.DrawerLayout;import android.support.v7.widget.SearchView;import android.support.v7.widget.Toolbar;import android.text.Html;import android.view.ActionMode;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AbsListView;import android.widget.AdapterView;import android.widget.ListView;import java.util.ArrayList;import java.util.List;import pl.codeinprogress.notes.R;import pl.codeinprogress.notes.model.Note;import pl.codeinprogress.notes.model.NotesDataSource;import pl.codeinprogress.notes.model.NotesRepository;import pl.codeinprogress.notes.model.local.LocalNotesDataSource;import pl.codeinprogress.notes.presenter.NotesPresenter;import pl.codeinprogress.notes.util.SchedulerProvider;import pl.codeinprogress.notes.view.adapters.NotesAdapter;import pl.codeinprogress.notes.view.listeners.NavigationListener;import pl.codeinprogress.notes.view.views.NotesView;public class NotesActivity extends BaseActivity implements NotesView,        AdapterView.OnItemClickListener, AbsListView.MultiChoiceModeListener {    private NotesPresenter presenter;    private ArrayList<Note> selectedNotes;    private NotesAdapter adapter;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        selectedNotes = new ArrayList<>();        setupView();    }    @Override    protected void onResume() {        super.onResume();        setupData();    }    @Override    protected void onNewIntent(Intent intent) {        if (intent.getAction() != null && intent.getAction().equals(Intent.ACTION_VIEW)) {            String noteId = intent.getStringExtra(DetailsActivity.NOTE_ID);            openEditView(noteId);        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);        final MenuItem searchItem = menu.findItem(R.id.action_search);        final SearchView searchView = (SearchView) searchItem.getActionView();        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {            @Override            public boolean onQueryTextSubmit(String query) {                return true;            }            @Override            public boolean onQueryTextChange(String query) {                //todo: add searching                //presenter.search(query);                return true;            }        });        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawerLayout);        ListView listView = (ListView) findViewById(R.id.listView);        int id = item.getItemId();        if (id == R.id.action_sort_title) {            //todo: add sorting            //presenter.sortByTitle();            return true;        } else if (id == R.id.action_sort_newest) {            //todo: add sorting            //presenter.sortByDate();            return true;        } else if (id == android.R.id.home) {            drawerLayout.openDrawer(GravityCompat.START);        } else if (id == R.id.action_select_all) {            for (int i = 0; i < listView.getChildCount(); i++) {                listView.setItemChecked(i, true);            }        } else if (id == R.id.action_night_mode) {            switchNightMode();        }        return super.onOptionsItemSelected(item);    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        if (parent.getItemAtPosition(position) instanceof Note) {            Note clickedNote = (Note) parent.getItemAtPosition(position);            openEditView(clickedNote.getId());        }    }    @Override    public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {        Note note = adapter.getItem(position);        if (checked) {            selectedNotes.add(note);        } else {            if (selectedNotes.contains(note)) {                selectedNotes.remove(note);            }        }        setActionModeTitle(mode, selectedNotes.size());    }    @Override    public boolean onCreateActionMode(ActionMode mode, Menu menu) {        getMenuInflater().inflate(R.menu.context_menu, menu);        return true;    }    @Override    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {        return false;    }    @Override    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {        if (item.getItemId() == R.id.action_delete) {            for (Note note: selectedNotes) {                presenter.deleteNote(note.getId());            }        }        mode.finish();        return false;    }    @Override    public void onDestroyActionMode(ActionMode mode) {        selectedNotes.clear();    }    private void setActionModeTitle(ActionMode mode, int numberOfItemsSelected) {        String quantityString = getResources().getQuantityString(R.plurals.selected_notes,                numberOfItemsSelected);        mode.setTitle(Html.fromHtml(String.format(String.valueOf("<small>" + quantityString + "</small>"), numberOfItemsSelected)));    }    @Override    public void showNotes(List<Note> notes) {        ListView listView = (ListView) findViewById(R.id.listView);        adapter = new NotesAdapter(notes);        for (Note note: notes) {            log(note.toString());        }        listView.setAdapter(adapter);    }    @Override    public void showLoadingError() {    }    @Override    public void showLoadingIndicator() {    }    @Override    public void hideLoadingIndicator() {    }    @Override    public void openEditView(String noteId) {        Intent intent = new Intent(this, DetailsActivity.class);        intent.putExtra(DetailsActivity.NOTE_ID, noteId);        startActivity(intent);    }    private void setupView() {        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        ListView listView = (ListView) findViewById(R.id.listView);        View emptyView = findViewById(R.id.emptyList);        listView.setEmptyView(emptyView);        listView.setMultiChoiceModeListener(this);        listView.setOnItemClickListener(this);        listView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE_MODAL);        setSupportActionBar(toolbar);        if (getSupportActionBar() != null) {            getSupportActionBar().setDisplayHomeAsUpEnabled(true);            toolbar.setNavigationIcon(R.drawable.ic_menu_white_24dp);        }    }    private void setupData() {        DrawerLayout drawerLayout = (DrawerLayout) findViewById(R.id.drawerLayout);        NavigationView navigationView = (NavigationView) findViewById(R.id.navigationView);        FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);        NavigationListener navigationListener = new NavigationListener(this, drawerLayout);        navigationView.setNavigationItemSelectedListener(navigationListener);        fab.setOnClickListener(v -> presenter.addNote());        presenter = new NotesPresenter(this, getRepository(), getScheduler());        presenter.loadNotes();    }}