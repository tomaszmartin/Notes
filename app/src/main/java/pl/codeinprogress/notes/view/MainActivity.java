package pl.codeinprogress.notes.view;import android.content.Intent;import android.databinding.DataBindingUtil;import android.os.Bundle;import android.support.v4.view.GravityCompat;import android.support.v7.widget.SearchView;import android.text.Html;import android.view.ActionMode;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AbsListView;import android.widget.AdapterView;import java.util.ArrayList;import pl.codeinprogress.notes.R;import pl.codeinprogress.notes.databinding.ActivityMainBinding;import pl.codeinprogress.notes.model.Note;import pl.codeinprogress.notes.presenter.firebase.BaseActivity;import pl.codeinprogress.notes.presenter.MainPresenter;import pl.codeinprogress.notes.view.views.MainView;import pl.codeinprogress.notes.view.adapters.NotesAdapter;import pl.codeinprogress.notes.view.listeners.NavigationListener;public class MainActivity extends BaseActivity implements MainView, View.OnClickListener,        AdapterView.OnItemClickListener,        AbsListView.MultiChoiceModeListener {    private MainPresenter presenter;    private ActivityMainBinding binding;    private NotesAdapter adapter;    private ArrayList<Note> selectedNotes;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        binding = DataBindingUtil.setContentView(this, R.layout.activity_main);        selectedNotes = new ArrayList<>();        setupView();    }    @Override    protected void onResume() {        super.onResume();        setupData();    }    @Override    protected void onNewIntent(Intent intent) {        if (intent.getAction() != null && intent.getAction().equals(Intent.ACTION_VIEW)) {            String noteId = intent.getStringExtra(DetailsActivity.NOTE_ID);            presenter.openNote(noteId);        }    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        getMenuInflater().inflate(R.menu.menu_main, menu);        final MenuItem searchItem = menu.findItem(R.id.action_search);        final SearchView searchView = (SearchView) searchItem.getActionView();        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {            @Override            public boolean onQueryTextSubmit(String query) {                return true;            }            @Override            public boolean onQueryTextChange(String query) {                presenter.search(query);                return true;            }        });        return true;    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        int id = item.getItemId();        if (id == R.id.action_sort_title) {            presenter.sortByTitle();            return true;        } else if (id == R.id.action_sort_newest) {            presenter.sortByDate();            return true;        } else if (id == android.R.id.home) {            binding.drawerLayout.openDrawer(GravityCompat.START);        } else if (id == R.id.action_select_all) {            for (int i = 0; i < binding.listView.getChildCount(); i++) {                binding.listView.setItemChecked(i, true);            }        } else if (id == R.id.action_night_mode) {            switchNightMode();        }        return super.onOptionsItemSelected(item);    }    @Override    public void authenticate() {        Intent loginIntent = new Intent(this, LoginActivity.class);        startActivity(loginIntent);    }    @Override    public void showNotes(NotesAdapter adapter) {        this.adapter = adapter;        binding.listView.setMultiChoiceModeListener(this);        binding.listView.setOnItemClickListener(this);        binding.listView.setAdapter(adapter);        binding.listView.setEmptyView(binding.emptyList);        binding.listView.setChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE_MODAL);    }    private void setupView() {        setSupportActionBar(binding.toolbar);        if (getSupportActionBar() != null) {            getSupportActionBar().setDisplayHomeAsUpEnabled(true);            binding.toolbar.setNavigationIcon(R.drawable.ic_menu_white_24dp);        }    }    private void setupData() {        NavigationListener navigationListener = new NavigationListener(this, binding.drawerLayout);        binding.navigationView.setNavigationItemSelectedListener(navigationListener);        binding.clearSearchutton.setOnClickListener(null);        binding.fab.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                presenter.addNote();            }        });        presenter = new MainPresenter(this, this);        presenter.loadNotes();    }    @Override    public void onClick(View v) {        presenter.addNote();    }    @Override    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {        if (parent.getItemAtPosition(position) instanceof Note) {            Note clickedNote = (Note) parent.getItemAtPosition(position);            presenter.openNote(clickedNote);        }    }    @Override    public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {        Note note = adapter.getItem(position);        if (checked) {            selectedNotes.add(note);        } else {            if (selectedNotes.contains(note)) {                selectedNotes.remove(note);            }        }        setActionModeTitle(mode, selectedNotes.size());    }    @Override    public boolean onCreateActionMode(ActionMode mode, Menu menu) {        getMenuInflater().inflate(R.menu.context_menu, menu);        return true;    }    @Override    public boolean onPrepareActionMode(ActionMode mode, Menu menu) {        return false;    }    @Override    public boolean onActionItemClicked(ActionMode mode, MenuItem item) {        if (item.getItemId() == R.id.action_delete) {            for (Note note: selectedNotes) {                presenter.deleteNote(note);            }        }        mode.finish();        return false;    }    @Override    public void onDestroyActionMode(ActionMode mode) {        selectedNotes.clear();    }    private void setActionModeTitle(ActionMode mode, int numberOfItemsSelected) {        String quantityString = getResources().getQuantityString(R.plurals.selected_notes,                numberOfItemsSelected);        mode.setTitle(Html.fromHtml(String.format(String.valueOf("<small>" + quantityString + "</small>"), numberOfItemsSelected)));    }}